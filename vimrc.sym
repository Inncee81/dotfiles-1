" QUICK KEYS,
"
" BUFFER Managment
" :CtrlPBufTag[All] - Search for a tag within all listed buffers
" <leader>b - Search currently open buffers
" :BufOnly - Close others

" WINDOW MANAGMENT ************************
" :Close - Close current window
" <leader>o - close other windows
" <leader>q - close buffer and/or window
"
" Max out the height of the current split
" -  - Bigger vsplit
" _  - Smaller vsplit
" <leader>-  - Max split
" <leader>_  - Min Split
" <leader>=  - EQ Split window (kill mappings we don't use
"
" Last insertion point - `.
" Last insertion point - gs
"
" WORD WRAPPIN *********************
" Wrap, delete quotes, etc - ds* delete surrounding *, w** wrap [modifier] with *, cs** change surrounding a with b
" dst - Delete surrounding Tag - dst
" cst - Change surrounding Tag - cst<em>
"
"
" COLUMN SELECT Ctrl-V
"
" CLOSE all other windows - <leader>o
"
" RESUME Search - //
"
" OPEN URL IN BROWSER - gx   (consider mapping to gb) - http://stackoverflow.com/questions/9458294/open-url-under-cursor-in-vim-with-browser
"
" GIT ********************************
" Cheatsheet - https://gist.github.com/dialelo/5902072
" :Gedit develop:public/js/view/transfer/page/enter.js - open this file in github
" Gtabedit HEAD^:public/templates/transfer/index.dust
" :Gvsplit
"
"
" :Gstatus - then use '-' to stage/unstage files. 'p' to stage hunks.
" :Gvdiff  - Vertical diff
" :gd
" :gco - reset file (git checkout)
"
" [h - next hunk (next git change)
" ]h - previous hunk
" <leader>fc - Find conflict
"
" "
" <leader>p GitGutterPreviewHunk
" <leader>s GitGutterStageHunk
" <leader>r GitGutterRevertHunk
"
" in DIFF:
"   :diffget - Get change from the other window.
"   :diffput - Push change to the other window.
"

" :imap    See the current insert mappings
" :verbose imap <tab>   See what's currently mapped to tab in insert mode

" Global NPM installs
" https://github.com/stevemao/diff-so-fancy

" Good Fonts:
" Inconsolata is best for presentations.



" - Menlo best for coding

" - meslo is fork with better line spacing



""
"" Basic Setup from Janus https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/settings.vim
""

set nocompatible      " Use vim, no vi defaults
set nospell           " No spell check
set number            " Show line numbers
set ruler             " Show line and column number
set equalalways       " Splits are always sized equally
syntax enable         " Turn on syntax highlighting allowing local overrides
if !has('nvim')
    set encoding=utf-8    " Set default encoding to UTF-8. Nvim defaults this. Only do this in non-nvim.
endif

" Most of these are from https://github.com/gmarik/Vundle.vim

filetype off                  " required for Vundle

" VUNDLE START ***********
"
" set the runtime path to include Vundle and initialize
" vim-snipmate looks in runtimepath for a folder named 'snippets' for code
" snippets
" set rtp+=~/.vim/bundle/Vundle.vim,~/.dotfiles/_codesnippets
set rtp+=~/.dotfiles/_codesnippets
set rtp+=~/.fzf " Is this the old version? "
" set rtp+=~/.dotfiles/_codesnippets,/usr/local/Cellar/fzf/HEAD
" set rtp+=~/.
call plug#begin('~/.vim/plugged')


" TODO: group these into sensible groupings
Plug 'tpope/vim-fugitive'                          " Git commands in Vim. Consider https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/fugitive.vim
" Plug 'scrooloose/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin'
" Lazy loading doesn't seem to work properly...
" Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }  " Load lazily, since first load is really slow with this on
" File tree  Consider https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/nerdtree.vim
" Git status in Nerdtree

Plug 'airblade/vim-gitgutter'                      " Git gutter
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Have it
Plug 'junegunn/fzf.vim'
" Plug 'kien/ctrlp.vim'                              " Fuzzy file finder
" Plug 'mileszs/ack.vim'                             " Ack in Vim. TODO: Consider trying ag instead of ack in here
" Plug 'rking/ag.vim'                                " Try AG instead of ACK

Plug 'tomtom/tcomment_vim'
" Plugin 'scrooloose/nerdcommenter'                  " Awesome commenting
" Plugin 'tpope/vim-commentary'                      "
" Plugin 'scrooloose/syntastic'                        " Syntax checker
Plug 'benekastah/neomake'                          " Async make (for syntax checking etc)
Plug 'tpope/vim-unimpaired'                        " Buffer switching
Plug 'duff/vim-bufonly'                            " Close all buffers but current
" Plugin 'mihaifm/bufstop'                             " MOST Amazing MRU Buffer switcher
Plug 'SirVer/ultisnips'                            " Snippet engine
" Vim Snippets (local)
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

Plug 'ervandew/supertab'                           " Sweet tab completion
Plug 'zerowidth/vim-copy-as-rtf'                   " Copy to rtf (and paste code to Keynote)
Plug 'bronson/vim-trailing-whitespace'             " Trail whitespace finder
Plug 'godlygeek/tabular'                           " easy aligning. :Tab /= http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plug 'tpope/vim-sleuth'                            " Better indentation. Give it a try... Sigh.
Plug 'tpope/vim-surround'                          " easy surround with quote etc
" Plugin 'jwhitley/vim-matchit'                      " better % matching. Does this even do anything? Not sure it's worth having around. REMOVE?
" Plugin 'terryma/vim-expand-region'
" Plugin 'jeetsukumaran/vim-markology'               " Mark visualizations
Plug 'bkad/CamelCaseMotion'                        " Next word considers camelcase as part of it :). LOVE IT!!! SO AMAZING

Plug 'janko-m/vim-test'                            " Running tests from vim
Plug 'tyru/open-browser.vim'                       " Open in test

Plug 'Raimondi/delimitMate'                        " quote, bracket, etc autocompletion
Plug 't9md/vim-textmanip'                          " Move selected text around easily
Plug 'ntpeters/vim-better-whitespace'              " Strip whitespace on save
Plug 'elzr/vim-json'                               " Hide quotes, json highlighting
Plug 'jimmyhchan/dustjs.vim'
Plug 'moll/vim-node'                               " node sugar like gf, gd?
Plug 'lambdatoast/elm.vim'                         " Elm syntax
Plug 'ElmCast/elm-vim'                             " Elm error sugar etc
Plug 'nikvdp/ejs-syntax'                           " EJS Highlighting

Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
" Status bar (bottom)
" Themes for statusbar
Plug 'altercation/vim-colors-solarized'            " Color scheme
Plug 'tomasr/molokai'                              " Color scheme based on monokai
Plug 'sickill/vim-monokai'

Plug 'jooize/vim-colemak'                          " Remap keyboard shortcuts to colemak
Plug 'pangloss/vim-javascript'                     " JS indentation & syntax sugar
Plug 'groenewege/vim-less'                         " Less language bundle
" Plugin 'mxw/vim-jsx'                                 " JSX syntax highlighting.


" Plugin 'junegunn/limelight.vim' "Focus mode

" Add plugins to &runtimepath
call plug#end()

" enable fzf for VIM
" yank will go to the system clipboard. Allows copy paste to outside
set clipboard=unnamed
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" VUNDLE END --
"
" ********************************************
" COLOR THEME & FONTS ************************
" ********************************************
"  if has("gui_macvim") "Only on macvim
"
" http://alvinalexander.com/linux/vi-vim-editor-color-scheme-syntax
" http://stackoverflow.com/questions/7278267/incorrect-colors-with-vim-in-iterm2-using-solarized
" Iterm must be set to xterm-256 (see above)
let g:solarized_contrast = "high"
let g:solarized_visibility = "low"
"let g:solarized_termcolors = 16
colorscheme solarized
set background=dark"


" For presentations
" colorscheme monokai
" let g:html_font = 'Menlo'

"? Does this even load?
if exists("neovim_dot_app")
  " This MUST be defined BEFORE the colorscheme. No idea why. Also, seems like
  " terminal vim doesn't handle the contrast variation very well, so let's leave
  " it in here.
  let g:solarized_contrast="high"
  let g:solarized_visibility="low"

  "
  " highlight Cursor ctermfg=Gray ctermbg=Green guifg=white guibg=black
  " highlight iCursor guifg=white guibg=steelblue

  " TODO: Test this out...


  "set guifont=Menlo:h15
  set guifont=Menlo\ for\ Powerline:h15     " from https://github.com/abertsch/Menlo-for-Powerline
  " set guifont=Fira\ Code:h15     " from https://github.com/abertsch/Menlo-for-Powerline
  set lines=999 columns=9999


  " clear SignColumn (Use guibg for sign bg, and guifg)
  "https://github.com/airblade/vim-gitgutter#sign-column, and
  "https://github.com/airblade/vim-gitgutter/issues/164
  " highlight clear SignColumn
  " highlight GitGutterAdd ctermfg=green guifg=darkgreen
  " highlight GitGutterChange ctermfg=yellow guifg=darkyellow
  " highlight GitGutterDelete ctermfg=red guifg=darkred
  " highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow


  " Remap these so we can use them
  call MacMenu("File.Save", "")
  " call MacMenu("Window.Close Tab", "")
  call MacMenu("Window.New Tab", "T-S-t")


  func! Backspace()
    if col('.') == 1
      if line('.')  != 1
        return  "\<ESC>kA\<Del>"
      else
        return ""
      endif
    else
      return "\<Left>\<Del>"
    endif
  endfunc


endif

"
" COLORS END --
"
"
" ********************************************
" BASE SETTINGS ************************
" ********************************************
"
set shortmess+=A 		" Ignore 'swapfile exists' warnings
"
"
set vb                   " enable visual bell (disable audio bell)
""
"" Whitespace (from Janus)
""

" http://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces
" tabstop=2 will make it 'look' like 2 spaces even though it's 4 :)
" Seems to be buggy :|
set tabstop=4 softtabstop=0 noexpandtab shiftwidth=4
" set smarttab
set nowrap                        " don't wrap lines
" set tabstop=4                     " a tab is two spaces
" set softtabstop=4
" set shiftwidth=4                  " an autoindent (with <<) is two spaces
" set expandtab                     " use spaces, not tabs
" set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" Strip whitespace on save for all files
autocmd FileType * autocmd BufWritePre <buffer> StripWhitespace

"
" INDENTATION
" Indentation defaults: TODO: Get these from editorconfig
autocmd FileType * set tabstop=4|set shiftwidth=4
set autoindent                  " Automatic indention

set scrolloff=5                 " Don't get too close to the edge!

" HIDDEN CHARS
" Use the same symbols as TextMate for tabstops and EOLs
" and have some indent guides
set listchars=tab:\|\ ,eol:¬,trail:·
"
"

" GIT COMMIT
" Git commit defaults. This runs these commands on vim startup (for the
" gitcommit file type instead of in the editor)
autocmd Filetype gitcommit setlocal spell textwidth=72


""
"" SEARCHING (from Janus)
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


""
"" Open link under cursor in Browser
""
" gx
" command! Browse OpenBrowser <cword>

""
"" SEARCHING from ACK / AG. Silver Searcher. Use AG instead of ack for ack plugin...
""
":AgFromSearch
":AgFile - Search for filename
" FIXME: Can we have it use the project root? Or do we need to hardcode that?
if executable('ag')
  " let g:ackprg = 'ag --vimgrep'
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Map :ags to the following...
" ! suffix overwrites so you can source the file easier...
" -Q makes it a non-regex search

" TODO: Fix this. Conflicts too much right now
" cmap ag Ag! -S -A 5 -B 5 -QS

" Search open buffers
cmap agb AgBuffer! -S -A 5 -B 5

cmap ags Ag! -S -A 5 -B 5 -G '\.(js\|es6)' -QS
cmap agp Ag! -S -A 5 -B 5 -G '\.properties' -QS

" http://vim.wikia.com/wiki/Search_and_replace_the_word_under_the_cursor
" AG Search for word under the cursor (<cword>) MONEY
cmap agc Ag! -S -A 5 -B 5 -G '\.(js\|es6)' <cword>
" -A -B after / before lines..."
"

" Turn off mappings
let g:ag_apply_lmappings=0
let g:ag_apply_qmappings=0

" let g:ag_qhandler="copen 40"
" Run this command when quickfix is ready
" let g:ag_qhandler="vertical topleft cwindow"
" PIPE allows us to use another command
let g:ag_qhandler="vert copen|WindowEq"
" start searching from project root
let g:ag_working_path_mode="r"
"

" Open QuickFix for Silver Searcher in horizontal split
" let g:ag_lhandler="topleft lopen"
" or just use v?
" go

""
"" Backup and swap files
""
set backupdir=~/.vim/backup " where to put backup files.
set directory=~/.vim/backup " where to put swap files.

""
"" UNDO - Save beyond closing
""
set hidden " persist beyond buffer switching
" Persistent undo - http://stackoverflow.com/questions/2732267/vim-loses-undo-history-when-changing-buffers
" Apparently you have to make the backup/undo folders for this to work :|

set undofile                    " Allow persistent undo
set undodir=~/.vim/undo         " Store undo files here. You have to make the folder if it doesn't exist
set undoreload=10000            " 10000 levels of undo!
set undolevels=1000

""
"" STATUSLINE (from Janus)  https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/statusline.vim
""

if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=Col:%v
  set statusline+=Buf:#%n
  set statusline+=[%b][0x%B]
endif

""
"" SAVING (from Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/autocmds.vim
""
if has("autocmd")
  if exists("g:autosave_on_blur")
    au FocusLost * silent! wall
  endif
endif



" Preserve Insert Cursor shape in nvim using iterm.
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
" let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" ********************************************
" MACROS
" ********************************************
" 1) Record
" 2) :reg to find it
" 3) Replace <80> with Ctrl+v Esc (in insert mode)
" http://stackoverflow.com/questions/2943555/how-to-save-a-vim-macro-that-contains-escape-key-presses
" TODO: Consider making a smart regex find/replace instead...
" function() -> () =>"
let @f = 'dw%t =>'

" require statement -> import
let @i = '^dwsimport f=dwdwsfrom xf)xn^'



" ********************************************
" KEYBOARD REMAPPING ************************
" ********************************************

" make cursor speed REALLY fast
" http://stackoverflow.com/questions/23078078/speed-up-vim-cursor-moving-through-j-k


" Remap leader to <space>
let mapleader = "\<Space>"

" Toggle hidden chars
nmap <leader>l :set list!<CR>

" ESCAPE VISUAL / NORMAL MODE with ,, Consider ,n ,. ,m ,e or something more
" rapid
" don't move cursor -1 on esc. Not sure if this works
" TRIAL ****
" inoremap <Esc> <Esc>`^
" End insert mode with ,, and don't -1
" inoremap ,, <ESC>`^
" Same with visual mode
" vnoremap ,, <ESC>`^
" Shift Enter -> esc, AND don't minus-1 on esc
" inoremap <S-CR> <Esc>`^


""
"" Use Tabs for doc (I use this very frequently)
""
" convert spaces to tabs
command! UseTabs set noet|retab!
command! ReTab set noet|retab!
" Not sure which I like better. The latter has to be highlighted... http://vim.wikia.com/wiki/Super_retab
"command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g



" Q: DO I EVER USE THIS? CONSIDER REPLACING WITH MOVE UP / DOWN
" SCROLL up/down 1 row with Ctrl-n Ctrl-e in NORMAL Mode
" Consider jumping 5 with shift...
" http://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping
" DELETE ME. Replaced this with text-manip move single line up/down
"nnoremap <C-n> <C-E>
"nnoremap <C-e> <C-Y>


" SAVE TO EXIT
" Disable MacVim keybinding for cmd save
"if has("gui_macvim") && has("gui_running")
"macmenu File.Save key=<nop>
"endif

" TODO: Move the duplicate from the bottom higher up
" On save with CMD -S, exit insert mode
" The MacVim key is overridden in .gvimrc
"imap <D-S> <Esc>`^
"inoremap <D-s> <ESC>:w<CR>i  "insertmode
" Apparently case matters. <D-S> didn't work :(
" Save but stay exited
"inoremap <D-s> <ESC>:w<CR>  "insert mode
nnoremap <T-s> :w<CR>        "normalmode
nnoremap <leader>s :w<CR>        "normalmode

" CLOSE current buffer and window with cmd-w
" nmap <T-w> :bd<CR>
" FIXME: How is the bottom one different?
" nmap <leader>q :bd <BAR> bd #<CR>
" nmap <leader>q :bp <BAR> bd #<CR>
nmap <leader>q :call CloseCurrentBufferOrWindow()<CR>
" nmap <leader>q <C-L>GetNumberOfOpenBuffers()
" # This is how you call a bloody function from a mapping
" nmap <leader>q :call GetNumberOfOpenBuffers()<CR>

" Will close the window if there are more open than should be
function! CloseCurrentBufferOrWindow()
" If NerdTree is  open
  if bufwinnr(t:NERDTreeBufName) == 1
      " If NERDTree is open, there should be 2 open windows.
      let shouldBeOpen = 2
  else
      " If NERDTree is not open, there should be 1 open window.
      let shouldBeOpen = 1

  endif

  " Close buffer and go to prior buffer
  :bp
  :bd #

  " If number of open windows exceeds what it should, close the window
  if winnr() > shouldBeOpen
      :close
  endif

endfunction

func! GetNumberOfOpenBuffers()
  " This is how you run a command from a script...
  " If there's one buffer open, and it's not a nerdtree buffer...
  let buffer_count = NrBufs()
  echo buffer_count
  if buffer_count > 1
    " <BAR> is the | which is used to separate vim commands. SO you can use several
    :bd<CR>
  elseif
    :bd<CR>
  endif

    " This block will ONLY be entered the very first time, when it normally
    " closes on it's own

    " Focus on new window, then call the stuff.?
    " NERDTreeFind
  " return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))

endfunction

function! NrBufs()
    let i = bufnr('$')
    let j = 0
    while i >= 1
        if buflisted(i)
            let j+=1
        endif
        let i-=1
    endwhile
    return j
endfunction

" CLOSE BUFFER with <leader>q
" nmap <leader>q :bp <BAR> bd #<CR>
" nmap <leader>qb :bp <BAR> bd #<CR>
" Try this instead of above...
" This one will close buffer and window...
" nmap <leader>b :bd<CR>

" WINDOW MANAGMENT / SIZING / NAVIGATION
" Go to next window
" nmap <leader>w <C-w>w
"nmap <leader>w <C-w>w
" nmap <C-i> <C-w>w
nmap <leader><tab> <C-w>w

" CLOSE all other windows.
nmap <leader>o :only<CR>

" Window SIZING
" 'normal' allows us to type is just like on the command line (useful when
" there aren't any commands for a mapping)
command! WindowEq :exe "normal \<C-W>="
command! WindowMax :vertical resize
command! WindowMin :vertical resize 0
command! WindowVInc :vertical resize +20
command! WindowVDec :vertical resize -20

" WINDOW RE-SIZING
nnoremap <silent> - :WindowVInc<CR>
nnoremap <silent> _ :WindowVDec<CR>
nnoremap <silent> <leader>- :WindowMax<CR>
nnoremap <silent> <leader>_ :WindowMin<CR>
nnoremap <silent> <leader>= :WindowEq<CR>

" :NextWindow
" command! WindowNext <C-w>w

" NAVIGATION-CURSOR
" Turbo navigation (Colemak) {{{
    " Works with counts, see ":help complex-repeat"
    nnoremap <silent> H @='5h'<CR>|xnoremap <silent> H @='5h'<CR>|onoremap <silent> H @='5h'<CR>|
    nnoremap <silent> N @='5gj'<CR>|xnoremap <silent> N @='5gj'<CR>|onoremap <silent> N @='5gj'<CR>|
    nnoremap <silent> E @='5gk'<CR>|xnoremap <silent> E @='5gk'<CR>|onoremap <silent> E @='5gk'<CR>|
    nnoremap <silent> I @='5l'<CR>|xnoremap <silent> I @='5l'<CR>|onoremap <silent> I @='5l'<CR>|
" }}}


" SEARCH/REPLACE
nnoremap <leader>fr :%s/


" Find / replace commands
" -range=% means range is optional (you can use selection) - http://vimdoc.sourceforge.net/htmldoc/usr_40.html
command! -range=% ReplaceSingleQuoteWithDouble :<line1>,<line2>s/'/"/gi
" This is busted. Replaces all words, not just the unquoted ones...
" command! -range=% ReplaceWrapUnquotedWords :<line1>,<line2>s/\(\w\+\)/"\1"/gi


" OPEN VIMRC
nnoremap <leader>ev <C-w>v<C-w>l<C-w>L:e ~/.vimrc<cr>
nnoremap <leader>sv :source ~/.vimrc<cr>
" Or just :so % when in this file

" TEXTMATE STYLE NEWLINES in braces (http://stackoverflow.com/questions/6066372/make-vim-curly-braces-square-braces-parens-act-like-textmate)
" Doesn't work. Is something overriding it?!?... Try w/o plugins
" It works when you type BRACKET then ENTER
inoremap {<cr> {<cr>}<c-o><s-o>
inoremap [<cr> [<cr>]<c-o><s-o>
inoremap (<cr> (<cr>)<c-o><s-o>

" Add ; to eol. Goto eol, append ; then back to insert mode
"nnoremap <leader>; $ t _
" Replace last char with ; WHY Doesnt this work with append?
" uses A bc vim colemak hasn't remapped yet most likely
nnoremap <leader>; A;<esc>
" Don't use leader in insert mode, esp if it's space b/c that causes delay on
" the space key :(
"inoremap <leader>; <esc>A;<esc>
" Do the same for ,
nnoremap <leader>, A,<esc>
"inoremap <leader>, <esc>A,<esc>

" Shortcuts from JANUS https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/mappings.vim
" if has("gui_macvim") && has("gui_running")
" if exists("neovim_dot_app")

" Map command-[ and command-] to indenting or outdenting
" while keeping the original selection in visual mode
"vmap <D-]> >gv
"vmap <D-[> <gv
" Above was busted due to colemak remappings
"vmap <D-]> >
"vmap <D-[> <
vmap <leader>[ <Plug>(textmanip-move-left)
vmap <leader>] <Plug>(textmanip-move-right)

nnoremap <leader>] >>
nnoremap <leader>[ <<

" omap <T-]> >>
" omap <T-[> <<

" imap <T-]> <Esc>>>i
" imap <T-[> <Esc><<i


" Bubble single lines Q: DOES THIS EVEN WORK? A: NO...
"  nmap <D-Up> [e
"nmap <D-Down> ]e
"nmap <D-k> [e
"nmap <D-j> ]e

" Map Command-# to switch tabs
" map  <T-0> 0gt
" imap <T-0> <Esc>0gt
" map  <T-1> 1gt
" imap <T-1> <Esc>1gt
" map  <T-2> 2gt
" imap <T-2> <Esc>2gt
" map  <T-3> 3gt
" imap <T-3> <Esc>3gt
" map  <T-4> 4gt
" imap <T-4> <Esc>4gt
" map  <T-5> 5gt
" imap <T-5> <Esc>5gt
" map  <T-6> 6gt
" imap <T-6> <Esc>6gt
" map  <T-7> 7gt
" imap <T-7> <Esc>7gt
" map  <T-8> 8gt
" imap <T-8> <Esc>8gt
" map  <T-9> 9gt
" imap <T-9> <Esc>9gt
" else

" endif




" Some fixes are placed in after/plugin/vim-surround

" https://github.com/jooize/vim-colemak - Q: DOES THIS EVEN WORK? MAYBE AN
" ORDER PROBLEM?
" Fix for colemak.vim keymap collision. tpope/vim-fugitive's maps y<C-G>
" and colemak.vim maps 'y' to 'w' (word). In combination this stalls 'y'
" because Vim must wait to see if the user wants to press <C-G> as well.
augroup RemoveFugitiveMappingForColemak
autocmd!
autocmd BufEnter * silent! execute "nunmap <buffer> <silent> y<C-G>"
augroup END


" BUFFER NAVIGATION - http://c7.se/switching-to-vundle/
"noremap <tab> <c-w><c-w>
" nnoremap <silent> <tab> :bn<CR>
nnoremap <silent> <tab> :call GotoNextBuffer()<CR>
" map shift tab to backwards
nnoremap <silent> <S-tab> :call GotoPriorBuffer()<CR>
" Toggle between last two buffers
nnoremap <leader><leader> <C-^>



" Q: Why do we use s: or caps?
function! GotoNextBuffer()
    " If currently focused on NERDtree, don't allow to change buffer
    " Instead change window, and then change buffer
    if exists("b:NERDTree")
        echo "Can't navigate on NERDTree"
	" Go to next window
	wincmd p
    endif

    " Go to next
    :bn
endfunction

function! GotoPriorBuffer()
    " If currently focused on NERDtree, don't allow to change buffer
    " Instead change window, and then change buffer
    if exists("b:NERDTree")
      echo "Can't navigate on NERDTree"
      " Go to next window
      wincmd p
    endif

    " Go to next
    :bp
endfunction

" ********************************************
" PLUGIN SETTINGS ************************
" ********************************************
" ********************************************
" PLUGIN SETTINGS ************************
" ********************************************


"" Node scratch buffer
" https://medium.com/@garoth/neovim-terminal-usecases-tricks-8961e5ac19b9#.aou6l0ld5
nnoremap <leader>N :below 20sp term://node<cr>i
" Open a split terminal below that will stay open (like for node process...)
" nnoremap <leader>o :below 10sp term://$SHELL<cr>i


""
"" SURROUND (wrapping and removing stuff). https://github.com/tpope/vim-surround/blob/master/plugin/surround.vim
""
" Don't apply any of the mappings. I'll do that manually. I think this has to
" be a vimrc.before file to actually work. Has no effect right now.
" let g:surround_no_mappings=1

" see mappings in ~/.dotfiles/after/plugin/vim-surround.vim


""
"" Autocompletion, and snippets...
"" Util-snips. http://vimcasts.org/episodes/meet-ultisnips/
""
let g:UltiSnipsExpandTrigger="<tab>"
" imap <Tab> <Plug>snipMateTrigger

" Edit JS snippets file
nnoremap <leader>es <C-w>v<C-w>l<C-w>L:e ~/.dotfiles/_codesnippets/snippets/javascript.snippets<cr>


"let g:UltiSnipsJumpForwardTrigger="<s-tab>"    " Lets you jump to next insertion point
" Let's try this
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" NERDCommenter mappings (from Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/NERD_commenter.vim
" if has("gui_macvim") && has("gui_running")
if exists("neovim_dot_app")
" map <D-/> <plug>NERDCommenterToggle<CR>
map <T-/> gcc

"Enter insert again when you're done
" imap <T-/> <Esc><plug>NERDCommenterToggle<CR><insert>
imap <T-/> <Esc>gcc<insert>
else
map <leader>/ gcc<CR>
endif

"
" NERDTREE easy toggle. More settings for this are in ~/.vim/plugin/nerdtree.vim
"
map <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
map <leader>f :NERDTreeFind<CR>

let g:NERDTreeShowHidden=1 	 " Show hidden files by default
let NERDTreeQuitOnOpen=0 " DOESN'T WORK :(


" autocmd! FileReadPre * call GotoNextWindow()

" If you try to :e when Nerdtree is focused, DO NOT open a file in nerdtree...
" Go to next window
" function! GotoNextWindow()
"   echo "DO IT"
" 	wincmd p
"     " If currently focused on NERDtree, don't allow to change buffer
"     " Instead change window, and then change buffer
"     if exists("b:NERDTree")
"         echo "Can't navigate on NERDTree"
" 	" Go to next window
"     endif
"
" endfunction


" If NERDTree is the only window left, close vim. TODO: Move to nerdtree file?
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" If only 1 buffer is left, make sure nerdtree is open...
" autocmd bufenter * if (bufnr('$') == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" autocmd bufenter * if (call s:getNumberOfOpenBuffers() == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" autocmd BufWinEnter * call s:getNumberOfOpenBuffers()
" au BufEnter * call s:getNumberOfOpenBuffers()
" get number of open buffers

" :NextWindow
" command NextWindow <C-w>w


function! s:getNumberOfOpenBuffers()
" This is how you run a command from a script...
" If there's one buffer open, and it's not a nerdtree buffer...
if exists("t:NERDTreeBufName")
  echo "HI"
  if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1 && bufwinnr(t:NERDTreeBufName) == -1
  endif

  " This block will ONLY be entered the very first time, when it normally
  " closes on it's own
else

  echo "NOT YET"
  " Focus on new window, then call the stuff.?
  " NERDTreeFind
endif
" return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))

endfunction

" autocmd bufenter * if (winnr("$") == 1 && b:NERDTreeType == "primary") | :NERDTreeFind | endif
" More in ~/.dotfiles/plugin/nerdtree.vim

"map <Leader>n <plug>NERDTreeTabsToggle<CR>


""
" Ctrl-P File Search
""

" CTRL-P Settings (Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/ctrlp.vim
"" Ctrl-p ignore node_modules (too much)
" Ignore some folders and files for CtrlP indexing | https://coderwall.com/p/hk_bwg/how-to-speed-up-ctrlp
" after modifying this, run :CtrlPClearAllCaches to clear the cache. If you want to be sure, delete the .cache/ctrlp dir in your home dir.
"let g:ctrlp_map = ''
"
" Map cmd t to open ctrl P
" if has("gui_macvim") && has("gui_running")
" if exists("neovim_dot_app")
"   map <T-t> :CtrlP<CR>
"   imap <T-t> <ESC>:CtrlP<CR>
" else
" endif

" nmap <leader>t :CtrlP<CR>
" nmap <leader>t :FZF<CR>

" use ag as source to respect gitignores, then pipe result to fzf
" options: Favor matches from the end, and shorter. And use exact match.
" down: location & size of window
" ignores locale folders except for locales/US/en
" TODO: Consider just using gitfiles. That works pretty well...
nnoremap <silent> <Leader>t :call fzf#run({
\   'source': 'ag -g "" --ignore locales/^US --ignore locales/US/^en',
\   'options': '--exact --tiebreak=end,length',
\   'down': '~40%',
\   'sink': function('<sid>dontopeninnerdtree')
\ })<CR>


function! s:dontopeninnerdtree(e)
    " if NERDTree has focus, go to next window
    if exists("b:NERDTree")
        " echo "Can't navigate on NERDTree"
		" Go to next window
		execute 'wincmd w'
    endif

    " Open selected file
    execute 'e ' a:e

endfunction




let g:fzf_command_prefix = 'Fzf'

" \   'options': '--exact --tiebreak=end,length',

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~30%' }

" Customize fzf colors to match your color scheme
" TODO: Change this?
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }


" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] to customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'


" Use the MRU cache
"
nnoremap <silent> <Leader>m :FzfHistory<CR>
" nnoremap <silent> <Leader>m :call fzf#run({
" \   'source': 'sed "1d" $HOME/.cache/neomru/file',
" \   'sink': 'e '
" \ })<CR>

" Pipe git status to fzf
"<sid> maps to s:
nnoremap <silent> <Leader>g :FzfGitFiles?<CR>
" nnoremap <silent> <Leader>g :call fzf#run({
" \   'source': 'git status -s',
" \   'options': '--ansi',
" \   'sink': function('<sid>gitstatusopen')
" \ })<CR>
"
" " Process && Open Git status line
" function! s:gitstatusopen(e)
" 	"TODO: FIXME: This is a regex that just takes everything after char 2.
" 	"haha. Maybe try to handle this properly...
"   execute 'e' matchstr(a:e, '.\+', 2)
" endfunction


nnoremap <silent> <Leader>b :FzfBuffers<CR>


" Jump to opened file (buffer) with <space>b
" function! s:buflist()
"   redir => ls
"   silent ls
"   redir END
"   return split(ls, '\n')
" endfunction
"
" function! s:bufopen(e)
"   execute 'buffer' matchstr(a:e, '^[ 0-9]*')
" endfunction
"
" " Send buffers to FZF
" nnoremap <silent> <Leader>b :call fzf#run({
" \   'source':  reverse(<sid>buflist()),
" \   'sink':    function('<sid>bufopen'),
" \   'options': '+m',
" \   'down':    len(<sid>buflist()) + 2
" \ })<CR>


" TODO: REMOVE THIS BELOW?

" let g:ctrlp_map = '<T-t>'
let g:ctrlp_working_path_mode = 0

" Let ctrlP search through the buffers
" nmap <leader>b :CtrlPBuffer<CR>

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Use ag instead of grep for ctrlp
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " http://stackoverflow.com/questions/18285751/use-ag-in-ctrlp-vim
  " No idea why this ignore works, but this appears to ignore non-us locales
  " folders
  " If you use user command, the custom_ignore doesn't apply...
  let g:ctrlp_user_command = 'ag %s -l --ignore .git --hidden -g ""'
  " let g:ctrlp_user_command = 'ag %s -l  --ignore .git --hidden -g ""'


  " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0

endif

" This won't work if ctrlp_user_command is set...
let g:ctrlp_custom_ignore = {
      \ 'dir':  'locales$|\.git$|node_modules',
      \ 'file': '\.so$\|\.dat$|\.DS_Store$'
      \ }


""
" GIT Gutter
""
" nmap <leader>sh <Plug>GitGutterStageHunk
" nmap <leader>rh <Plug>GitGutterRevertHunk
" nmap <leader>ph <Plug>GitGutterPreviewHunk
nmap <leader>s <Plug>GitGutterStageHunk
nmap <leader>r <Plug>GitGutterUndoHunk
nmap <leader>p <Plug>GitGutterPreviewHunk

" ZOOMwin - Replaced by :WindowMax
" nmap <leader>zw :ZoomWin<CR>

" EASYMOTION to be <leader> s - REMOVE
" map <Leader> <Plug>(easymotion-prefix)

"
" Show tabs & buffers at the top
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1     " use nice arrow symbols etc

" Disable "mixed indent" warnings for airline status bar (false positives)
let g:airline#extensions#whitespace#enabled = 0

"
" Bufstop mappings (awesome buffer speed switching)
"
" nmap <leader>b :BufstopMode<CR>

" nmap <leader>b :BufstopModeFast<CR>

" Go to last buffer. Avoid it getting overwritten by
" BufstopAutoSpeedToggle
" FIXME: Or should we remap the leaderkeys via the
" variable available?
" nnoremap <leader>1 :b#<CR>
" let g:BufstopSpeedKeys = ["0", "1", "2", "3", "4", "5"]
"
" " Map <leader>1-5 to recent buffers
" let g:BufstopAutoSpeedToggle = 1
"
"
" " Default speed assignment keys
" let g:BufstopKeys = "1234arstfxcz"
" "
" " FIXME: Not working...
" let g:BufstopDismissKey = "<BS>"

""
" VIM-TEST
""
" let test#strategy = "neovim"
let test#strategy = "iterm"


""
" Use JS syntax highlighting in .es6 files
""

" au BufReadPost *.es6 set syntax=javascript
" autocmd FileType *.es6 set filetype=javascript syntax=javascript
" associate *.foo with php filetype
" doesn't work :(
" au BufRead,BufNewFile *.es6 setfiletype javascript
" au BufRead,BufNewFile *.es6 set filetype=js
" https://robots.thoughtbot.com/replace-coffeescript-with-es6

" http://learnvimscriptthehardway.stevelosh.com/chapters/12.html
" When a new file is read into buffer with .es6 extension, set file to es6,
" and call the setEslintForEs6() function...
"
" Call Neomake (linters etc) on save for all files
autocmd! BufWritePost * Neomake

autocmd BufRead,BufNewFile *.js call s:setupXBLintRules()

" Set all the .*rc files to json
autocmd BufRead,BufNewFile .*rc setfiletype json
" Set .vimrc as a vim file
autocmd BufRead,BufNewFile .vimrc setfiletype vim

" http://gregjs.com/vim/2015/linting-code-with-neomake-and-neovim/
" Use this executable (Hacky but needed for our setup)
" Default ESLint settings for all JS files...
let g:neomake_javascript_enabled_makers = ['eslint']

" If eslint exec exists, use that.
let eslint_path = '/Users/jacharles/dev/p2pnodeweb/node_modules/.bin/eslint'
if filereadable(eslint_path)
  let g:neomake_javascript_eslint_exe = eslint_path
endif

" let g:neomake_javascript_eslint_args = ['--no-ignore', '-c', '/Users/jacharles/dev/p2pnodeweb/.eslintes6rc', '-f', 'compact']

" Keep tray closed
let g:neomake_open_list = 0

let g:neomake_warning_sign = {
\ 'text': '!',
\ 'texthl': 'Warning',
\ }

let g:neomake_error_sign = {
\ 'text': '✗',
\ 'texthl': 'Error',
\ }

" Troubleshooting Neomake. Turn these on...
" let g:neomake_verbose=3
" let g:neomake_open_list = 2
" let g:neomake_logfile='/tmp/error.log'

""
" Lint /public/calculator files differently. This is lame, but must be done...
" :(, in order to have different lint rules apply.
""
function! s:setupXBLintRules()

  " :echo pwd
  " TODO: does this need to be throttled?
  " http://vi.stackexchange.com/questions/104/how-can-i-see-the-full-path-of-the-current-file
  " let pathName = @%
  " :echo pathName
  "
  " Works GREAT, but isn't needed anymore
  " if pathname contains this string, change the eslint params
  " if pathName =~ "public/js/calculator"
    " :echo "MATCH"
    " let b:neomake_javascript_eslint_args = ['-c', '/Users/jacharles/dev/p2pnodeweb/.eslintes6rc', '-f', 'compact']
  " endif

  " Set the checkers for the current buffer to eslint
  " let b:syntastic_checkers = ["eslint"] " b: means for the current buffer only...
  " Set the arguments to pass to eslint to use the es6 ruleset...
  " let b:neomake_javascript_eslint_args = "-c /Users/jacharles/dev/p2pnodeweb/.eslintes6rc"

endfunction

" http://vim.wikia.com/wiki/Filetype.vim
" For es6 files, run this every time it gets opened, and apply these buffer " variables
" FIXME: Deprecate this. We don't need this anymore
function! s:setupES6File()
" TODO: Eithr apply to all files on enter, or wait until col shows, or neomake is run...
" Dirty dirty hack. This doesn't work if we do it on startup

setfiletype javascript " Set filetype

  " Set the checkers for the current buffer to eslint
  " let b:syntastic_checkers = ["eslint"] " b: means for the current buffer only...
  " Set the arguments to pass to eslint to use the es6 ruleset...
  " let b:syntastic_javascript_eslint_args = "-c /Users/jacharles/dev/p2pnodeweb/.eslintes6rc"
  " let b:neomake_javascript_eslint_args = "-c /Users/jacharles/dev/p2pnodeweb/.eslintes6rc"
  " FIXME: Change this for files in the /calculator folder...
  let b:neomake_javascript_eslint_args = ['--fix', '-c', '/Users/jacharles/dev/p2pnodeweb/.eslintes6rc', '-f', 'compact']
  " let b:neomake_javascript_eslint_exe = '/Users/jacharles/dev/p2pnodeweb/node_modules/.bin/eslint'

endfunction



""
"" JSX - Allow JSX syntax highlighting in JS files
""
let g:jsx_ext_required = 0

" React syntactic setup - https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015
" Now uses eslint https://github.com/jaxbot/syntastic-react
" let g:syntastic_javascript_checkers = ['eslint']
" Use jshint (uses ~/.jshintrc)

" Use zsh for the syntastic shell...
" let g:syntastic_shell = '/bin/zsh'


" On by default, turn it off for html
" let g:syntastic_mode_map = { 'mode': 'active',
"     \ 'active_filetypes': ['es6', 'js', 'javascript'],
"     \ 'passive_filetypes': ['html'] }

""
"" Vim-Expand-Region
""
" xnoremap <CR> <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)

""
"" UNIMPAIRED - Map newline in normal mode to Cmd-Enter - Normal/Insert mode.
""
nmap <T-CR> <Plug>unimpairedBlankDown
nmap <leader><CR> <Plug>unimpairedBlankDown
"imap <D-CR>o   # consider this for insert mode... Doesn't make sense...
"imap <C-o> <esc>o " Maps Ctrl o to newline in insert mode
" Cmd shift Enter inserts newline ABOVE current line
nmap <T-S-CR> <Plug>unimpairedBlankUp


" Move single line up/down in normal mode (uses unimpaired keystrokes)
"nmap <C-e> <Plug>(textmanip-move-up)
"nmap <C-n> <Plug>(textmanip-move-down)
"http://vimcasts.org/episodes/bubbling-text/
nmap <C-n> ]e
nmap <C-e> [e

" Move SINGLE char left/right in insert mode

" Vim-TextManip. Move selection down/up   (Ctrl+n, Ctrl+e) in VISUAL MODE
" Consider this one instead https://github.com/t9md/vim-textmanip
" Ctrl + n,e,h,i to move selection around
xmap <C-n> <Plug>(textmanip-move-down)
xmap <C-e> <Plug>(textmanip-move-up)
"imap <C-h> <Plug>(textmanip-move-left) Doesnt WORK
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-i> <Plug>(textmanip-move-right)
"imap <C-i> <Plug>(textmanip-move-right)

" map CMD (D-) + these for text duplication
" This plugin is done REALLY well. Having these mappins is NICE
" x is for visual, n for normal mode
" TODO: Make this jump down 5 at a time with shift.
xmap <T-d> <Plug>(textmanip-duplicate-down)
xmap <leader>d <Plug>(textmanip-duplicate-down)
nmap <T-d> <Plug>(textmanip-duplicate-down)
nmap <leader>d <Plug>(textmanip-duplicate-down)
xmap <T-D> <Plug>(textmanip-duplicate-up)
nmap <T-D> <Plug>(textmanip-duplicate-up)



" FUGITIVE (Git sugar) - http://andyatkinson.com/blog/2013/10/28/open-the-current-file-in-github-enterprise-from-vim
let g:fugitive_github_domains = ['https://github.paypal.com/']      "Gbrowse will work on ent github pages

" Vertical diff
cmap gd Gvdiff

cmap gs Gstatus

" Reset file aka $git checkout %
cmap gco Gread

" GIT GUTTER colors
"highlight clear SignColumn (Use guibg for sign bg, and guifg)
"https://github.com/airblade/vim-gitgutter#sign-column, and
"https://github.com/airblade/vim-gitgutter/issues/164
" Tells gitgutter to leave the sign column alone
"let g:gitgutter_override_sign_column_highlight = 0
" Xterm colors: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" 34 is lighter green than 28

highlight clear SignColumn
highlight GitGutterAdd ctermfg=28 guifg=darkgreen
highlight GitGutterChange ctermfg=100 guifg=darkyellow
highlight GitGutterDelete ctermfg=red guifg=darkred
highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow

" https://github.com/altercation/vim-colors-solarized/blob/master/colors/solarized.vim#L285
" 10, 0, 8 are similar options from the colorscheme...
" Not sure why this has to be re-applied...
highlight SignColumn ctermbg=8

" GIT GUTTER mappins
" nmap <leader>fh <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterNextHunk
nmap ]h <Plug>GitGutterPrevHunk


" ***********************************************************************
" EXPERIMENTAL Eval if these are working or if we even want these here...
" ***********************************************************************

" find merge conflict markers - from janus
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" fix the arrows in insert in console vi
" Doesn't work in nvim
" if has("gui_macvim") && has("gui_running")
" else
"   set term=builtin_ansi
" endif

" remap X to be del left instead of delete line. DD makes more sense for that
" anyway. Should I just fork his version of colemak at this point? FIXME


" map Delete to ESC and CTRL. HIGHLY experimental
" Don't think the ctrl works properly
inoremap <BS> <ESC>
xnoremap <BS> <ESC>
" Minus 1 on esc (not normal behavior)
" inoremap <BS> <ESC>`^
" xnoremap <BS> <ESC>`^

"
" Preserve backspace with SHIFT-BS (aka SHIFT-CAPSLOCK/DELETE)
inoremap <S-BS> <c-r>=Backspace()<CR>
xnoremap <S-BS> <Del>
" This feels a little dirty. Try shift at the same time...
" If I could preserve the normal backspace key, perhaps it would simly
" discourage me from using the del(caps) key too much in vim...
" Same with cmd backspace (del). THIS WORKS!!!! - What does <c-r>= do?
" is there something that overrides this? In the MacVim gvimrc perhaps?
" Maybe we can load an 'after' file or something...
" THIS NEEDS TO BE IN .GVIMRC
"inoremap <D-BS> <c-r>=Backspace()<CR>
"inoremap <D-BS> <S-Del>
" CHECK .gvimrc. Some are there
"xnoremap <D-BS> <Del>
" Am I going a little overboard here? I feel like I'm fixing things that then
" need to be fixed. Feels like a lot of cascading effects I'm dealing with...
" In insert mode, cmd shift Backspace will delete from the cursor to col0
" inoremap <T-S-BS> <esc>d0
"nnoremap <S-BS> <c-r>=Backspace()<CR> "doesn't seeme to work


" This forces backspace to behave properly
" ! overrides if already exists. Helps prevent errors
func! Backspace()
if col('.') == 1
  if line('.')  != 1
    return  "\<ESC>kA\<Del>"
  else
    return ""
  endif
else
  return "\<Left>\<Del>"
endif
endfunc




" Pretty sure this has to go in .gvimrc and has no effect here
"if has("gui_macvim")
"macmenu &File.New\ Tab key=<nop>
"map <D-t> :CtrlP<CR>
"endif


" REMAP CMD-SAVE to esc after saving
" This seems to work for normal and insert mode
" nnoremap <T-s> :w<CR>
nnoremap <leader>w :w<CR>
" inoremap <T-s> <Esc>:w<CR>
" xnoremap <T-s> <Esc>:w<CR>

" VIM SCRIPTING LESSONS:
" | can be used to combine commands
" :exe "normal \<C-w>w"  can be used to map a command to a keymap.
"
"
"
"
"
"
" ##################################################
""" Snippets!!!!

" snippet cl "console.log(...)" b
" console.log($0);
" endsnippet
