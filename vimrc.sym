" TODO: Consider making a quick cheatsheet of the important keystrokes...
" - Fix sourcing of this file (I think it's cmaps... Add ! to fix it...
"
" Silly hack to avoid having to escape all the comments in here...
" if 0
" i


" WINDOW MANAGMENT
" <leader>o - close other windows
" <leader>q - close buffer and window
" <leader>b - close buffer and window
"
" Newline - cmd Enter
"
" Last insertion point - `.
" Last insertion point - gs
"
" Wrap, delete quotes, etc - ds* delete surrounding *, w** wrap [modifier] with *, cs** change surrounding a with b
" Delete surrounding Tag - dst
" Change surrounding Tag - cst<em>
"
" CLOSE all other windows - <leader>o
"
" RESUME Search - //
"
"
" GIT ********************************
" Cheatsheet - https://gist.github.com/dialelo/5902072
" :Gedit develop:public/js/view/transfer/page/enter.js - open this file in github
" Gtabedit HEAD^:public/templates/transfer/index.dust
" :Gvsplit
"
"
" :Gstatus - then use '-' to stage/unstage files. 'p' to stage hunks.
" :Gvdiff  - Vertical diff
" :gd
" :gco - reset file (git checkout)
"
" [h - next hunk (next git change)
" ]h - previous hunk
" <leader>fc - Find conflict
" .
" endif


""
"" Basic Setup from Janus https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/settings.vim
""

set nocompatible      " Use vim, no vi defaults
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8

" Most of these are from https://github.com/gmarik/Vundle.vim

filetype off                  " required for Vundle

" VUNDLE START ***********
"
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

                                                     " TODO: group these into sensible groupings
Plugin 'tpope/vim-fugitive'                          " Git commands in Vim. Consider https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/fugitive.vim
Plugin 'scrooloose/nerdtree'                         " File tree  Consider https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/nerdtree.vim
Plugin 'airblade/vim-gitgutter'                      " Git gutter
Plugin 'Xuyuanp/nerdtree-git-plugin'                 " Git status in Nerdtree
Plugin 'kien/ctrlp.vim'                              " Fuzzy file finder
Plugin 'mileszs/ack.vim'                             " Ack in Vim. TODO: Consider trying ag instead of ack in here
Plugin 'rking/ag.vim'                                " Try AG instead of ACK

Plugin 'tomtom/tcomment_vim'
" Plugin 'scrooloose/nerdcommenter'                  " Awesome commenting
" Plugin 'tpope/vim-commentary'                      "
Plugin 'scrooloose/syntastic'                        " Syntax checker
Plugin 'tpope/vim-unimpaired'                        " Buffer switching
Plugin 'SirVer/ultisnips'                            " Snippet engine
Plugin 'honza/vim-snippets'                          " Default snippet package for the utilsnips engine

Plugin 'ervandew/supertab'                           " Sweet tab completion
Plugin 'zerowidth/vim-copy-as-rtf'                   " Copy to rtf (and paste code to Keynote)
                                                     " Plugin 'garbas/vim-snipmate'                                                                                                " Snippet framework
Plugin 'vim-scripts/ZoomWin'                         " Zoom current buffer window <ld> zw
Plugin 'bronson/vim-trailing-whitespace'             " Trail whitespace finder
Plugin 'godlygeek/tabular'                           " easy aligning. :Tab /= http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plugin 'tpope/vim-sleuth'                            " Better indentation. Give it a try... Sigh.
Plugin 'tpope/vim-surround'                          " easy surround with quote etc
" Plugin 'jwhitley/vim-matchit'                      " better % matching. Does this even do anything? Not sure it's worth having around. REMOVE?
" Plugin 'terryma/vim-expand-region'
" Plugin 'jeetsukumaran/vim-markology'               " Mark visualizations
Plugin 'bkad/CamelCaseMotion'                        " Next word considers camelcase as part of it :). LOVE IT!!! SO AMAZING


Plugin 'Raimondi/delimitMate'                        " quote, bracket, etc autocompletion
Plugin 't9md/vim-textmanip'                          " Move selected text around easily
Plugin 'ntpeters/vim-better-whitespace'              " Strip whitespace on save
Plugin 'elzr/vim-json'                               " Hide quotes, json highlighting
Plugin 'jimmyhchan/dustjs.vim'
Plugin 'moll/vim-node'                               " node sugar like gf, gd?
Plugin 'lambdatoast/elm.vim'                         " Elm syntax
Plugin 'ElmCast/elm-vim'                             " Elm error sugar etc

Plugin 'bling/vim-airline'                           " Status bar (bottom)
Plugin 'altercation/vim-colors-solarized'            " Color scheme
Plugin 'tomasr/molokai'                              " Color scheme based on monokai
Plugin 'lsdr/monokai'

Plugin 'jooize/vim-colemak'                          " Remap keyboard shortcuts to colemak
Plugin 'pangloss/vim-javascript'                     " JS indentation & syntax sugar
Plugin 'groenewege/vim-less'                         " Less language bundle
Plugin 'mxw/vim-jsx'                                 " JSX syntax highlighting.


" Plugin 'junegunn/limelight.vim' "Focus mode

call vundle#end()            " required
filetype plugin indent on    " required

" enable fzf for VIM
set rtp+=~/.fzf

" To ignore plugin indent changes, instead use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" VUNDLE END --
"
" ********************************************
" COLOR THEME & FONTS ************************
" ********************************************
if has("gui_macvim") " Only on macvim
	" This MUST be defined BEFORE the colorscheme. No idea why. Also, seems like
	" terminal vim doesn't handle the contrast variation very well, so let's leave
	" it in here.
	let g:solarized_contrast="high"
	let g:solarized_visibility="low"
	"
	colorscheme solarized
	set background=dark"



	"set guifont=Menlo:h15
  set guifont=Menlo\ for\ Powerline:h15     " from https://github.com/abertsch/Menlo-for-Powerline
	set lines=999 columns=9999


    " clear SignColumn (Use guibg for sign bg, and guifg)
    "https://github.com/airblade/vim-gitgutter#sign-column, and
    "https://github.com/airblade/vim-gitgutter/issues/164
    highlight clear SignColumn
    highlight GitGutterAdd ctermfg=green guifg=darkgreen
    highlight GitGutterChange ctermfg=yellow guifg=darkyellow
    highlight GitGutterDelete ctermfg=red guifg=darkred
    highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow

endif
"
" COLORS END --
"
"
" ********************************************
" BASE SETTINGS ************************
" ********************************************
"
set shortmess+=A 		" Ignore 'swapfile exists' warnings
"
"
""
"" Whitespace (from Janus)
""

set nowrap                        " don't wrap lines
set tabstop=4                     " a tab is two spaces
set shiftwidth=4                  " an autoindent (with <<) is two spaces
"set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" Strip whitespace on save for all files
autocmd FileType * autocmd BufWritePre <buffer> StripWhitespace

"
" INDENTATION
" Indentation defaults: TODO: Get these from editorconfig
autocmd FileType * set tabstop=4|set shiftwidth=4
set autoindent                  " Automatic indention

set scrolloff=5                 " Don't get too close to the edge!

" HIDDEN CHARS
" Use the same symbols as TextMate for tabstops and EOLs
" and have some indent guides
set listchars=tab:\|\ ,eol:¬,trail:·
"
"

" GIT COMMIT
" Git commit defaults. This runs these commands on vim startup (for the
" gitcommit file type instead of in the editor)
autocmd Filetype gitcommit setlocal spell textwidth=72


""
"" SEARCHING (from Janus)
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


""
"" SEARCHING from ACK / AG. Silver Searcher. Use AG instead of ack for ack plugin...
""
if executable('ag')
  " let g:ackprg = 'ag --vimgrep'
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Map :ags to the following...
" ! suffix overwrites so you can source the file easier...
cmap ag Ag -A 5 -B 5
cmap ags Ag -A 5 -B 5 -G '\.(js\|es6)'
cmap agp Ag -A 5 -B 5 -G '\.properties'

" http://vim.wikia.com/wiki/Search_and_replace_the_word_under_the_cursor
" AG Search for word under the cursor (<coword) MONEY
cmap agc Ag -A 5 -B 5 -G '\.(js\|es6)' <cword>
" -A -B after / before lines..."

" Open QuickFix for Silver Searcher in horizontal split
" let g:ag_lhandler="topleft lopen"
" or just use v?
" go

""
"" Backup and swap files
""
set backupdir=~/.vim/backup " where to put backup files.
set directory=~/.vim/backup " where to put swap files.

""
"" UNDO - Save beyond closing
""
set hidden " persist beyond buffer switching
" Persistent undo - http://stackoverflow.com/questions/2732267/vim-loses-undo-history-when-changing-buffers
" Apparently you have to make the backup/undo folders for this to work :|

set undofile                    " Allow persistent undo
set undodir=~/.vim/undo         " Store undo files here. You have to make the folder if it doesn't exist
set undoreload=10000            " 10000 levels of undo!
set undolevels=1000

""
"" STATUSLINE (from Janus)  https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/statusline.vim
""

if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=Col:%v
  set statusline+=Buf:#%n
  set statusline+=[%b][0x%B]
endif

""
"" SAVING (from Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/autocmds.vim
""
if has("autocmd")
  if exists("g:autosave_on_blur")
    au FocusLost * silent! wall
  endif
endif



" ********************************************
" MACROS
" ********************************************
" 1) Record
" 2) :reg to find it
" 3) Replace <80> with Ctrl+v Esc (in insert mode)
" http://stackoverflow.com/questions/2943555/how-to-save-a-vim-macro-that-contains-escape-key-presses
" TODO: Consider making a smart regex find/replace instead...
" function() -> () =>"
let @f = 'dw%t =>'

" require statement -> import
let @i = '^dwsimport f=dwdwsfrom xf)xn^'



" ********************************************
" KEYBOARD REMAPPING ************************
" ********************************************

" make cursor speed REALLY fast
" http://stackoverflow.com/questions/23078078/speed-up-vim-cursor-moving-through-j-k


" Remap leader to <space>
let mapleader = "\<Space>"

" Toggle hidden chars
nmap <leader>l :set list!<CR>

" ESCAPE VISUAL / NORMAL MODE with ,, Consider ,n ,. ,m ,e or something more
" rapid
" don't move cursor -1 on esc. Not sure if this works
inoremap <Esc> <Esc>`^
" End insert mode with ,, and don't -1
" inoremap ,, <ESC>`^
" Same with visual mode
" vnoremap ,, <ESC>`^
" Shift Enter -> esc, AND don't minus-1 on esc
" inoremap <S-CR> <Esc>`^


""
"" Use Tabs for doc (I use this very frequently)
""
" convert spaces to tabs
command! UseTabs set noet|retab!
command! ReTab set noet|retab!
" Not sure which I like better. The latter has to be highlighted... http://vim.wikia.com/wiki/Super_retab
"command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g



" Q: DO I EVER USE THIS? CONSIDER REPLACING WITH MOVE UP / DOWN
" SCROLL up/down 1 row with Ctrl-n Ctrl-e in NORMAL Mode
" Consider jumping 5 with shift...
" http://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping
" DELETE ME. Replaced this with text-manip move single line up/down
"nnoremap <C-n> <C-E>
"nnoremap <C-e> <C-Y>


" SAVE TO EXIT
" Disable MacVim keybinding for cmd save
"if has("gui_macvim") && has("gui_running")
    "macmenu File.Save key=<nop>
"endif

" TODO: Move the duplicate from the bottom higher up
" On save with CMD -S, exit insert mode
" The MacVim key is overridden in .gvimrc
"imap <D-S> <Esc>`^
"inoremap <D-s> <ESC>:w<CR>i  "insertmode
" Apparently case matters. <D-S> didn't work :(
" Save but stay exited
"inoremap <D-s> <ESC>:w<CR>  "insert mode
"nnoremap <D-s> :w<CR>        "normalmode


" CLOSE BUFFER with <leader>q
 nmap <leader>q :bp <BAR> bd #<CR>
" Try this instead of above...
nmap <leader>b :bd<CR>

" CLOSE all other windows.
nmap <leader>o :only<CR>
" CLOSE current buffer and window



" SEARCH/REPLACE
nnoremap <leader>fr :%s/

" OPEN VIMRC
nnoremap <leader>ev <C-w>v<C-w>l<C-w>L:e ~/.vimrc<cr>
nnoremap <leader>sv :source ~/.vimrc<cr>
" Or just :so % when in this file

" TEXTMATE STYLE NEWLINES in braces (http://stackoverflow.com/questions/6066372/make-vim-curly-braces-square-braces-parens-act-like-textmate)
" Doesn't work. Is something overriding it?!?... Try w/o plugins
" It works when you type BRACKET then ENTER
inoremap {<cr> {<cr>}<c-o><s-o>
inoremap [<cr> [<cr>]<c-o><s-o>
inoremap (<cr> (<cr>)<c-o><s-o>

" Add ; to eol. Goto eol, append ; then back to insert mode
"nnoremap <leader>; $ t _
" Replace last char with ; WHY Doesnt this work with append?
" uses A bc vim colemak hasn't remapped yet most likely
nnoremap <leader>; A;<esc>
" Don't use leader in insert mode, esp if it's space b/c that causes delay on
" the space key :(
"inoremap <leader>; <esc>A;<esc>
" Do the same for ,
nnoremap <leader>, A,<esc>
"inoremap <leader>, <esc>A,<esc>

" Shortcuts from JANUS https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/mappings.vim
if has("gui_macvim") && has("gui_running")

  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  "vmap <D-]> >gv
  "vmap <D-[> <gv
  " Above was busted due to colemak remappings
  "vmap <D-]> >
  "vmap <D-[> <
  vmap <D-[> <Plug>(textmanip-move-left)
  vmap <D-]> <Plug>(textmanip-move-right)

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i


  " Bubble single lines Q: DOES THIS EVEN WORK? A: NO...
"  nmap <D-Up> [e
  "nmap <D-Down> ]e
  "nmap <D-k> [e
  "nmap <D-j> ]e

    " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else

endif




" Some fixes are placed in after/plugin/vim-surround

" https://github.com/jooize/vim-colemak - Q: DOES THIS EVEN WORK? MAYBE AN
" ORDER PROBLEM?
" Fix for colemak.vim keymap collision. tpope/vim-fugitive's maps y<C-G>
" and colemak.vim maps 'y' to 'w' (word). In combination this stalls 'y'
" because Vim must wait to see if the user wants to press <C-G> as well.
augroup RemoveFugitiveMappingForColemak
    autocmd!
    autocmd BufEnter * silent! execute "nunmap <buffer> <silent> y<C-G>"
augroup END


" BUFFER NAVIGATION - http://c7.se/switching-to-vundle/
"noremap <tab> <c-w><c-w>
nnoremap <silent> <tab> :bn<CR>
" map shift tab to backwards
nnoremap <silent> <S-tab> :bp<CR>
" Toggle between last two buffers
nnoremap <leader><leader> <C-^>


""
"" Split Window navigation
""
nmap <leader>w <C-w>w


" ********************************************
" PLUGIN SETTINGS ************************
" ********************************************
" ********************************************
" PLUGIN SETTINGS ************************
" ********************************************


""
"" SURROUND (wrapping and removing stuff). https://github.com/tpope/vim-surround/blob/master/plugin/surround.vim
""
" Don't apply any of the mappings. I'll do that manually. I think this has to
" be a vimrc.before file to actually work. Has no effect right now.
" let g:surround_no_mappings=1

" see mappings in ~/.dotfiles/after/plugin/vim-surround.vim


""
"" Util-snips. http://vimcasts.org/episodes/meet-ultisnips/
""
let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<s-tab>"    " Lets you jump to next insertion point
" Let's try this
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" NERDCommenter mappings (from Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/NERD_commenter.vim
if has("gui_macvim") && has("gui_running")
  " map <D-/> <plug>NERDCommenterToggle<CR>
  map <D-/> gcc

	"Enter insert again when you're done
  " imap <D-/> <Esc><plug>NERDCommenterToggle<CR><insert>
  imap <D-/> <Esc>gcc<insert>
else
  map <leader>/ <plug>NERDCommenterToggle<CR>
endif

"
" NERDTREE easy toggle. More settings for this are in ~/.vim/plugin/nerdtree.vim
"
map <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
map <leader>f :NERDTreeFind<CR>

let g:NERDTreeShowHidden=1 	 " Show hidden files by default
let NERDTreeQuitOnOpen=0 " DOESN'T WORK :(

" If NERDTree is the only window left, close vim. TODO: Move to nerdtree file?
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" If only 1 buffer is left, make sure nerdtree is open...
" autocmd bufenter * if (bufnr('$') == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" autocmd bufenter * if (call s:getNumberOfOpenBuffers() == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" autocmd BufWinEnter * call s:getNumberOfOpenBuffers()
" au BufEnter * call s:getNumberOfOpenBuffers()
" get number of open buffers

" :NextWindow
" command NextWindow <C-w>w


function! s:getNumberOfOpenBuffers()
  " This is how you run a command from a script...
  " If there's one buffer open, and it's not a nerdtree buffer...
 if exists("t:NERDTreeBufName")
   echo "HI"
   if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1 && bufwinnr(t:NERDTreeBufName) == -1
   endif

   " This block will ONLY be entered the very first time, when it normally
   " closes on it's own
 else

   echo "NOT YET"
   " Focus on new window, then call the stuff.?
   " NERDTreeFind
 endif
  " return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))

endfunction

" autocmd bufenter * if (winnr("$") == 1 && b:NERDTreeType == "primary") | :NERDTreeFind | endif
" More in ~/.dotfiles/plugin/nerdtree.vim

"map <Leader>n <plug>NERDTreeTabsToggle<CR>

" CTRL-P Settings (Janus) https://github.com/carlhuda/janus/blob/master/janus/vim/tools/janus/after/plugin/ctrlp.vim
"" Ctrl-p ignore node_modules (too much)
" Ignore some folders and files for CtrlP indexing | https://coderwall.com/p/hk_bwg/how-to-speed-up-ctrlp
" after modifying this, run :CtrlPClearAllCaches to clear the cache. If you want to be sure, delete the .cache/ctrlp dir in your home dir.
"let g:ctrlp_map = ''
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|node_modules$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
"
" Map cmd t to open ctrl P
if has("gui_macvim") && has("gui_running")
  map <D-t> :CtrlP<CR>
  imap <D-t> <ESC>:CtrlP<CR>
endif

let g:ctrlp_map = '<D-t>'
let g:ctrlp_working_path_mode = 0


" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Use ag instead of grep for ctrlp
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " http://stackoverflow.com/questions/18285751/use-ag-in-ctrlp-vim
  let g:ctrlp_user_command = 'ag %s -l  --hidden -g ""'
endif


" ZOOMwin
nmap <leader>zw :ZoomWin<CR>

" EASYMOTION to be <leader> s - REMOVE
" map <Leader> <Plug>(easymotion-prefix)

"
" Show tabs & buffers at the top
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1     " use nice arrow symbols etc

" Disable "mixed indent" warnings for airline status bar (false positives)
let g:airline#extensions#whitespace#enabled = 0


""
" Use JS syntax highlighting in .es6 files
""

" au BufReadPost *.es6 set syntax=javascript
" autocmd FileType *.es6 set filetype=javascript syntax=javascript
" associate *.foo with php filetype
" doesn't work :(
" au BufRead,BufNewFile *.es6 setfiletype javascript
" au BufRead,BufNewFile *.es6 set filetype=js
" https://robots.thoughtbot.com/replace-coffeescript-with-es6

" http://learnvimscriptthehardway.stevelosh.com/chapters/12.html
" When a new file is read into buffer with .es6 extension, set file to es6,
" and call the setEslintForEs6() function...
autocmd BufRead,BufNewFile *.es6 call s:setupES6File()

" Set all the .*rc files to json
autocmd BufRead,BufNewFile .*rc setfiletype json
" Set .vimrc as a vim file
autocmd BufRead,BufNewFile .vimrc setfiletype vim


" Default ESLint settings for all JS files...
let g:syntastic_javascript_checkers = ['eslint']
" Use this executable (Hacky but needed for our setup)
let g:syntastic_javascript_eslint_exec = '/Users/jacharles/dev/p2pnodeweb/node_modules/.bin/eslint'
let g:syntastic_check_on_open=0 " Don't run on open (faster)
let g:syntastic_enable_signs=1
" Better :sign interface symbols
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'

" http://vim.wikia.com/wiki/Filetype.vim
" For es6 files, run this every time it gets opened, and apply these buffer " variables
function! s:setupES6File()
	setfiletype javascript " Set filetype

	" Set the checkers for the current buffer to eslint
	" let b:syntastic_checkers = ["eslint"] " b: means for the current buffer only...
	" Set the arguments to pass to eslint to use the es6 ruleset...
	let b:syntastic_javascript_eslint_args = "-c /Users/jacharles/dev/p2pnodeweb/.eslintes6rc"
endfunction


""
"" JSX - Allow JSX syntax highlighting in JS files
""
let g:jsx_ext_required = 0

" React syntactic setup - https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015
" Now uses eslint https://github.com/jaxbot/syntastic-react
" let g:syntastic_javascript_checkers = ['eslint']
" Use jshint (uses ~/.jshintrc)

" Use zsh for the syntastic shell...
" let g:syntastic_shell = '/bin/zsh'


" On by default, turn it off for html
" let g:syntastic_mode_map = { 'mode': 'active',
"     \ 'active_filetypes': ['es6', 'js', 'javascript'],
"     \ 'passive_filetypes': ['html'] }

""
"" Vim-Expand-Region
""
" xnoremap <CR> <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)

""
"" UNIMPAIRED - Map newline in normal mode to Cmd-Enter - Normal/Insert mode.
""
nmap <D-CR> <Plug>unimpairedBlankDown
"imap <D-CR>o   # consider this for insert mode... Doesn't make sense...
"imap <C-o> <esc>o " Maps Ctrl o to newline in insert mode
" Cmd shift Enter inserts newline ABOVE current line
nmap <D-S-CR> <Plug>unimpairedBlankUp


" Move single line up/down in normal mode (uses unimpaired keystrokes)
"nmap <C-e> <Plug>(textmanip-move-up)
"nmap <C-n> <Plug>(textmanip-move-down)
"http://vimcasts.org/episodes/bubbling-text/
nmap <C-n> ]e
nmap <C-e> [e

" Move SINGLE char left/right in insert mode

" Vim-TextManip. Move selection down/up   (Ctrl+n, Ctrl+e) in VISUAL MODE
" Consider this one instead https://github.com/t9md/vim-textmanip
" Ctrl + n,e,h,i to move selection around
xmap <C-n> <Plug>(textmanip-move-down)
xmap <C-e> <Plug>(textmanip-move-up)
"imap <C-h> <Plug>(textmanip-move-left) Doesnt WORK
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-i> <Plug>(textmanip-move-right)
"imap <C-i> <Plug>(textmanip-move-right)

" map CMD (D-) + these for text duplication
" This plugin is done REALLY well. Having these mappins is NICE
" x is for visual, n for normal mode
" TODO: Make this jump down 5 at a time with shift.
xmap <D-d> <Plug>(textmanip-duplicate-down)
nmap <D-d> <Plug>(textmanip-duplicate-down)
xmap <D-D> <Plug>(textmanip-duplicate-up)
nmap <D-D> <Plug>(textmanip-duplicate-up)



" FUGITIVE (Git sugar) - http://andyatkinson.com/blog/2013/10/28/open-the-current-file-in-github-enterprise-from-vim
let g:fugitive_github_domains = ['https://github.paypal.com/']      "Gbrowse will work on ent github pages

" Vertical diff
cmap gd Gvdiff

cmap gs Gstatus

" Reset file aka $git checkout %
cmap gco Gread

" GIT GUTTER colors
"highlight clear SignColumn (Use guibg for sign bg, and guifg)
"https://github.com/airblade/vim-gitgutter#sign-column, and
"https://github.com/airblade/vim-gitgutter/issues/164
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green guifg=darkgreen
highlight GitGutterChange ctermfg=yellow guifg=darkyellow
highlight GitGutterDelete ctermfg=red guifg=darkred
highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow


" GIT GUTTER mappins
" nmap <leader>fh <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterNextHunk
nmap ]h <Plug>GitGutterPrevHunk


" ***********************************************************************
" EXPERIMENTAL Eval if these are working or if we even want these here...
" ***********************************************************************

" find merge conflict markers - from janus
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" fix the arrows in insert in console vi
if has("gui_macvim") && has("gui_running")
else
  set term=builtin_ansi
endif

" remap X to be del left instead of delete line. DD makes more sense for that
" anyway. Should I just fork his version of colemak at this point? FIXME


" map Delete to ESC and CTRL. HIGHLY experimental
" Don't think the ctrl works properly
inoremap <BS> <ESC>`^
xnoremap <BS> <ESC>`^

"
" Preserve backspace with SHIFT-BS
inoremap <S-BS> <c-r>=Backspace()<CR>
xnoremap <S-BS> <Del>
" This feels a little dirty. Try shift at the same time...
" If I could preserve the normal backspace key, perhaps it would simly
" discourage me from using the del(caps) key too much in vim...
" Same with cmd backspace (del). THIS WORKS!!!! - What does <c-r>= do?
" is there something that overrides this? In the MacVim gvimrc perhaps?
" Maybe we can load an 'after' file or something...
" THIS NEEDS TO BE IN .GVIMRC
"inoremap <D-BS> <c-r>=Backspace()<CR>
"inoremap <D-BS> <S-Del>
" CHECK .gvimrc. Some are there
"xnoremap <D-BS> <Del>
" Am I going a little overboard here? I feel like I'm fixing things that then
" need to be fixed. Feels like a lot of cascading effects I'm dealing with...
" In insert mode, cmd shift Backspace will delete from the cursor to col0
inoremap <D-S-BS> <esc>d0
"nnoremap <S-BS> <c-r>=Backspace()<CR> "doesn't seeme to work


" This forces backspace to behave properly
" ! overrides if already exists. Helps prevent errors
func! Backspace()
  if col('.') == 1
    if line('.')  != 1
      return  "\<ESC>kA\<Del>"
    else
      return ""
    endif
  else
    return "\<Left>\<Del>"
  endif
endfunc




" Pretty sure this has to go in .gvimrc and has no effect here
"if has("gui_macvim")
  "macmenu &File.New\ Tab key=<nop>
  "map <D-t> :CtrlP<CR>
"endif


" REMAP CMD-SAVE to esc after saving
" This seems to work for normal and insert mode
nnoremap <D-s> :w<CR>
inoremap <D-s> <Esc>:w<CR>
xnoremap <D-s> <Esc>:w<CR>

